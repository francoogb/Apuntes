Herencia: Una clase hija hereda los métodos y propiedades de una clase padre.
Polimorfismo: Una clase hija modifica o sobrescribe un método heredado para dar un comportamiento diferente.

Crear una clase Persona

class Persona {
  constructor(nombre, edad, ciudad) {
    this.nombre = nombre;
    this.edad = edad;
    this.ciudad = ciudad;
  }

  saludar() {
    console.log(`Hola, mi nombre es ${this.nombre} y tengo ${this.edad} años.`);
  }
}

const persona = new Persona("Juan", 25, "Madrid");
persona.saludar();


2 - Herencia: Crear una clase Empleado

class Persona {
  constructor(nombre, edad, ciudad) {
    this.nombre = nombre;
    this.edad = edad;
    this.ciudad = ciudad;
  }

  saludar() {
    console.log(`Hola, mi nombre es ${this.nombre} y tengo ${this.edad} años.`);
  }
}

class Empleado extends Persona {
  constructor(nombre, edad, ciudad, puesto) {
    super(nombre, edad, ciudad);
    this.puesto = puesto;
  }

  decirPuesto() {
    console.log(`Mi puesto es ${this.puesto}.`);
  }
}

const empleado = new Empleado("Carlos", 30, "Barcelona", "Desarrollador");
empleado.saludar();
empleado.decirPuesto();

3-Encapsulamiento

class Coche {
  constructor(marca, modelo, año) {
    this.marca = marca;
    this.modelo = modelo;
    this._año = año;  // Propiedad privada
  }

  get año() {
    return this._año;
  }

  set año(value) {
    const currentYear = new Date().getFullYear();
    if (value >= currentYear) {
      this._año = value;
    } else {
      console.log("El año no puede ser menor al año actual.");
    }
  }
}

const coche = new Coche("Toyota", "Corolla", 2020);
coche.año = 2019;  // Mensaje de error
coche.año = 2025;  // Establece el año correctamente
console.log(coche.año);

4- Polimorfismo: Clase Animal y clases hijas

class Animal {
  hacerSonido() {
    console.log("Este animal hace un sonido");
  }
}

class Perro extends Animal {
  hacerSonido() {
    console.log("El perro hace: ¡Guau!");
  }
}

class Gato extends Animal {
  hacerSonido() {
    console.log("El gato hace: ¡Miau!");
  }
}

const perro = new Perro();
perro.hacerSonido();

const gato = new Gato();
gato.hacerSonido();


5- Clases y objetos con métodos

class CuentaBancaria {
  constructor(titular, saldo) {
    this.titular = titular;
    this.saldo = saldo;
  }

  depositar(cantidad) {
    this.saldo += cantidad;
    console.log(`Depósito realizado. Nuevo saldo: ${this.saldo}`);
  }

  retirar(cantidad) {
    if (this.saldo >= cantidad) {
      this.saldo -= cantidad;
      console.log(`Retiro realizado. Nuevo saldo: ${this.saldo}`);
    } else {
      console.log("Saldo insuficiente.");
    }
  }
}

const cuenta = new CuentaBancaria("Juan", 1000);
cuenta.depositar(500);
cuenta.retirar(200);

